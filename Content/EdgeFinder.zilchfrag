// Shader input attribute definitions
// [BuiltInInput]  Input comes from predefined data given by the graphics engine
// [StageInput]    Input comes from the previous hardware stage (mesh -> vertex -> geometry -> pixel)
// [FragmentInput] Input comes from a previous fragment in the same stage
// [PropertyInput] Input comes from this fragment
// [Input]         Input auto resolves from any of the previous in the order
//                 [FragmentInput][StageInput][BuiltInInput][PropertyInput]
//
// Pixel fragment Example:
// [FragmentInput][StageInput] var ViewNormal : Real3;
// Input will come from a previous pixel fragment that outputs ViewNormal
// otherwise, input will come from the vertex shader

[Pixel]
struct EdgeFinder
{
  // BuiltIn utility
  // Time incrementing every frame
  [BuiltInInput] var FrameTime : Real;
  // Time incrementing when TimeSpace is active
  [BuiltInInput] var LogicTime : Real;
  // NearPlane from the Camera (positive value)
  [BuiltInInput] var NearPlane : Real;
  // FarPlane from the Camera (positive value)
  [BuiltInInput] var FarPlane : Real;
  // Pixel size of the viewport created by CameraViewport
  [BuiltInInput] var ViewportSize : Real2;
  // 1.0 / ViewportSize
  [BuiltInInput] var InverseViewportSize : Real2;
  // World position from the object's Transform (non-streamed objects)
  [BuiltInInput] var ObjectWorldPosition : Real3;

  // BuiltIn transformations
  // Position transforms
  [BuiltInInput] var LocalToWorld : Real4x4;
  [BuiltInInput] var WorldToLocal : Real4x4;
  [BuiltInInput] var LocalToView : Real4x4;
  [BuiltInInput] var ViewToLocal : Real4x4;
  [BuiltInInput] var LocalToPerspective : Real4x4;
  // Normal/tangents transforms (inverse transpose)
  [BuiltInInput] var LocalToWorldNormal : Real3x3;
  [BuiltInInput] var WorldToLocalNormal : Real3x3;
  [BuiltInInput] var LocalToViewNormal : Real3x3;
  [BuiltInInput] var ViewToLocalNormal : Real3x3;
  // View and perspective transforms
  [BuiltInInput] var WorldToView : Real4x4;
  [BuiltInInput] var ViewToWorld : Real4x4;
  [BuiltInInput] var ViewToPerspective : Real4x4;
  [BuiltInInput] var PerspectiveToView : Real4x4;

  // Common vertex inputs
  [FragmentInput][StageInput] var ViewPosition : Real3;
  [FragmentInput][StageInput] var ViewNormal : Real3;
  [FragmentInput][StageInput] var ViewTangent : Real3;
  [FragmentInput][StageInput] var ViewBitangent : Real3;
  [FragmentInput][StageInput] var Uv : Real2;
  
  [Input][Output] var Color : Real4;
  [Input] var DepthTexture : Sampler2d;
  
  [Input] var GeometryBuffer0 : Sampler2d;
  [Input] var NormalThreshold : Real = 45;
  [Input] var DepthThreshold = 0.001;
  [Input] var EdgeColor : Real4 = Colors.Black;
  [Input] var EdgeStrength : Real = 0.75;

  function Main()
  {
    var geometrySample0 = this.GeometryBuffer0.Sample(this.Uv);
    var normal = GeometryPass.GetNormal(geometrySample0);
    var depth = GeometryPass.GetDepth(geometrySample0);
    var uvs = FixedArray[Real2, 4]()
    {
      this.Uv + Real2(this.InverseViewportSize.X, 0),
      this.Uv + Real2(-this.InverseViewportSize.X, 0),
      this.Uv + Real2(0, this.InverseViewportSize.Y),
      this.Uv + Real2(0, -this.InverseViewportSize.Y),
    };
    var isEdge = false;
    var edge = 0.0;
    
    var cosError = Math.Cos(Math.ToRadians(this.NormalThreshold));
    for(var i = 0; i < 4; ++i)
    {
      var sample = this.GeometryBuffer0.Sample(uvs[i]);
      var sampleNormal = GeometryPass.GetNormal(sample);
      var sampleDepth = GeometryPass.GetDepth(sample);
      
      var depthEdge = Math.Abs(depth - sampleDepth) > this.DepthThreshold;
      var normalEdge = Math.Dot(sampleNormal, normal) < cosError;
      //edge = Math.Lerp(edge, this.EdgeStrength, depthEdge as Real);
      //edge = Math.Lerp(edge, this.EdgeStrength, normalEdge as Real);
      isEdge = isEdge || depthEdge;
      isEdge = isEdge || normalEdge;
    }
    
    //if(isEdge)
    this.Color = Math.Lerp(this.Color, this.EdgeColor, this.EdgeStrength * isEdge as Real);
  }
}
